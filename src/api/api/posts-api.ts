/* tslint:disable */
/* eslint-disable */
/**
 * nookpost-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { GetPostFilteredResponseBody } from '../models'
// @ts-ignore
import type { GetPostResponseBody } from '../models'
// @ts-ignore
import type { PostData } from '../models'
// @ts-ignore
import type { PostPostResponseBody } from '../models'
// @ts-ignore
import type { PutPostRequestBody } from '../models'
/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * The list will be ordered by date of creation
     * @summary Gets a filtered set of posts
     * @param {string} [username] The username of the author that created the post
     * @param {string} [categoryUuid] The uuid of the category the posts are in
     * @param {string} [textSearch] Text to search for in articles (body and title)
     * @param {number} [page] The page the posts should be on (requires pageItemCount)
     * @param {number} [pageItemCount] The number of posts per page (requires page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsGet: async (
      username?: string,
      categoryUuid?: string,
      textSearch?: string,
      page?: number,
      pageItemCount?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      if (username !== undefined) {
        localVarQueryParameter['username'] = username
      }

      if (categoryUuid !== undefined) {
        localVarQueryParameter['categoryUuid'] = categoryUuid
      }

      if (textSearch !== undefined) {
        localVarQueryParameter['textSearch'] = textSearch
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (pageItemCount !== undefined) {
        localVarQueryParameter['pageItemCount'] = pageItemCount
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Creates a post
     * @param {PostData} postData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsPost: async (
      postData: PostData,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'postData' is not null or undefined
      assertParamExists('apiV1PostsPost', 'postData', postData)
      const localVarPath = `/api/v1/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postData,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Deletes a post
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsUuidDelete: async (
      uuid: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists('apiV1PostsUuidDelete', 'uuid', uuid)
      const localVarPath = `/api/v1/posts/{uuid}`.replace(
        `{${'uuid'}}`,
        encodeURIComponent(String(uuid)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets a post
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsUuidGet: async (
      uuid: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists('apiV1PostsUuidGet', 'uuid', uuid)
      const localVarPath = `/api/v1/posts/{uuid}`.replace(
        `{${'uuid'}}`,
        encodeURIComponent(String(uuid)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Modifies a post
     * @param {string} uuid
     * @param {PutPostRequestBody} putPostRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsUuidPut: async (
      uuid: string,
      putPostRequestBody: PutPostRequestBody,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists('apiV1PostsUuidPut', 'uuid', uuid)
      // verify required parameter 'putPostRequestBody' is not null or undefined
      assertParamExists('apiV1PostsUuidPut', 'putPostRequestBody', putPostRequestBody)
      const localVarPath = `/api/v1/posts/{uuid}`.replace(
        `{${'uuid'}}`,
        encodeURIComponent(String(uuid)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        putPostRequestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
  return {
    /**
     * The list will be ordered by date of creation
     * @summary Gets a filtered set of posts
     * @param {string} [username] The username of the author that created the post
     * @param {string} [categoryUuid] The uuid of the category the posts are in
     * @param {string} [textSearch] Text to search for in articles (body and title)
     * @param {number} [page] The page the posts should be on (requires pageItemCount)
     * @param {number} [pageItemCount] The number of posts per page (requires page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsGet(
      username?: string,
      categoryUuid?: string,
      textSearch?: string,
      page?: number,
      pageItemCount?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostFilteredResponseBody>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsGet(
        username,
        categoryUuid,
        textSearch,
        page,
        pageItemCount,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PostsApi.apiV1PostsGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Creates a post
     * @param {PostData} postData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsPost(
      postData: PostData,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPostResponseBody>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsPost(postData, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PostsApi.apiV1PostsPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Deletes a post
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsUuidDelete(
      uuid: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsUuidDelete(uuid, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PostsApi.apiV1PostsUuidDelete']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Gets a post
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsUuidGet(
      uuid: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostResponseBody>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsUuidGet(uuid, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PostsApi.apiV1PostsUuidGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Modifies a post
     * @param {string} uuid
     * @param {PutPostRequestBody} putPostRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsUuidPut(
      uuid: string,
      putPostRequestBody: PutPostRequestBody,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsUuidPut(
        uuid,
        putPostRequestBody,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PostsApi.apiV1PostsUuidPut']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PostsApiFp(configuration)
  return {
    /**
     * The list will be ordered by date of creation
     * @summary Gets a filtered set of posts
     * @param {string} [username] The username of the author that created the post
     * @param {string} [categoryUuid] The uuid of the category the posts are in
     * @param {string} [textSearch] Text to search for in articles (body and title)
     * @param {number} [page] The page the posts should be on (requires pageItemCount)
     * @param {number} [pageItemCount] The number of posts per page (requires page)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsGet(
      username?: string,
      categoryUuid?: string,
      textSearch?: string,
      page?: number,
      pageItemCount?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GetPostFilteredResponseBody> {
      return localVarFp
        .apiV1PostsGet(username, categoryUuid, textSearch, page, pageItemCount, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Creates a post
     * @param {PostData} postData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsPost(
      postData: PostData,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PostPostResponseBody> {
      return localVarFp
        .apiV1PostsPost(postData, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Deletes a post
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsUuidDelete(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .apiV1PostsUuidDelete(uuid, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets a post
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsUuidGet(
      uuid: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GetPostResponseBody> {
      return localVarFp.apiV1PostsUuidGet(uuid, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Modifies a post
     * @param {string} uuid
     * @param {PutPostRequestBody} putPostRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsUuidPut(
      uuid: string,
      putPostRequestBody: PutPostRequestBody,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1PostsUuidPut(uuid, putPostRequestBody, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
  /**
   * The list will be ordered by date of creation
   * @summary Gets a filtered set of posts
   * @param {string} [username] The username of the author that created the post
   * @param {string} [categoryUuid] The uuid of the category the posts are in
   * @param {string} [textSearch] Text to search for in articles (body and title)
   * @param {number} [page] The page the posts should be on (requires pageItemCount)
   * @param {number} [pageItemCount] The number of posts per page (requires page)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public apiV1PostsGet(
    username?: string,
    categoryUuid?: string,
    textSearch?: string,
    page?: number,
    pageItemCount?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PostsApiFp(this.configuration)
      .apiV1PostsGet(username, categoryUuid, textSearch, page, pageItemCount, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Creates a post
   * @param {PostData} postData
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public apiV1PostsPost(postData: PostData, options?: RawAxiosRequestConfig) {
    return PostsApiFp(this.configuration)
      .apiV1PostsPost(postData, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Deletes a post
   * @param {string} uuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public apiV1PostsUuidDelete(uuid: string, options?: RawAxiosRequestConfig) {
    return PostsApiFp(this.configuration)
      .apiV1PostsUuidDelete(uuid, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets a post
   * @param {string} uuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public apiV1PostsUuidGet(uuid: string, options?: RawAxiosRequestConfig) {
    return PostsApiFp(this.configuration)
      .apiV1PostsUuidGet(uuid, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Modifies a post
   * @param {string} uuid
   * @param {PutPostRequestBody} putPostRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public apiV1PostsUuidPut(
    uuid: string,
    putPostRequestBody: PutPostRequestBody,
    options?: RawAxiosRequestConfig,
  ) {
    return PostsApiFp(this.configuration)
      .apiV1PostsUuidPut(uuid, putPostRequestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
